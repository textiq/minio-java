/*
 * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2015,2016 MinIO, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***************************/
/* gradleVersion = '6.2.2' */
/***************************/

plugins {
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "com.github.spotbugs" version "4.0.1"
  id "io.codearte.nexus-staging" version "0.21.2"
  id "com.diffplug.gradle.spotless" version "4.4.0"
}

/*
 * Root project definitions
 */
apply plugin: 'io.codearte.nexus-staging'

allprojects {
    group = 'io.minio'
    version = '7.1.0a-textiq'
    if (!project.hasProperty('release')) {
        version += '-DEV'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.spotbugs'
    apply plugin: "com.diffplug.gradle.spotless"

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "com.carrotsearch.thirdparty:simple-xml-safe:2.7.1"
        compile "com.google.guava:guava:25.1-jre"
        compile "com.squareup.okhttp3:okhttp:3.14.9"
        compile "com.fasterxml.jackson.core:jackson-annotations:2.10.3"
        compile "com.fasterxml.jackson.core:jackson-core:2.10.3"
        compile "com.fasterxml.jackson.core:jackson-databind:2.10.3"
        compile 'com.github.spotbugs:spotbugs-annotations:4.0.0'
        compile 'net.jcip:jcip-annotations:1.0'
        compile 'com.google.code.findbugs:jsr305:3.0.2'

        testCompile "com.squareup.okhttp3:mockwebserver:3.14.9"
        testCompile "junit:junit:4.12"
    }

    [compileJava, compileTestJava].each() {
        it.options.fork = true
        it.options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:-options", "-Werror"]
        it.options.encoding = "UTF-8"
    }

    spotbugs {
        effort = "max"
        reportLevel = "low"
    }

    test {
        // Show stacktrace on test failure than opening in web browser.
        testLogging {
            exceptionFormat = 'full'
            showExceptions true
            showCauses true
            showStackTraces true
        }
    }

    task localeTest(type: Test) {
        description = "Runs tests with locale de.DE"
        System.setProperty('user.language', 'de')
        System.setProperty('user.country', 'DE')
        systemProperties = System.properties
        dependsOn test
    }

    check.dependsOn localeTest

    sourceCompatibility = 1.8

    spotless {
        java {
            target '**/*.java'
            importOrder 'edu', 'com', 'io', 'java', 'javax', 'org', ''
            removeUnusedImports()
            googleJavaFormat()
        }
        groovyGradle {
            target '*.gradle'
        }
    }
}

project(':api') {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven'
    apply plugin: 'signing'

    archivesBaseName = 'minio'

    nexusStaging {
        packageGroup = group
        stagingProfileId = '9b746c9f8abc1'
    }

    configurations.all {
        resolutionStrategy {
            force 'com.fasterxml.jackson.core:jackson-annotations:2.9.6'
            failOnVersionConflict()
        }
    }

    jar {
        manifest {
            attributes('Implementation-Title': archivesBaseName,
            'Implementation-Version': version,
            'Built-By': 'MinIO, inc',
            'Built-JDK': System.getProperty('java.version'),
            'Source-Compatibility': sourceCompatibility,
            'Target-Compatibility': targetCompatibility)
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc.options {
        encoding = 'UTF-8'
        links 'https://docs.oracle.com/javase/8/docs/api/'
    }

    // Disable JavaDoc doclint on Java 8. It's annoying.
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        archives javadocJar, sourcesJar, shadowJar
    }

    signing {
        if (project.properties.containsKey('signing.keyId')) {
            sign configurations.archives
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                ext.nexusUsername = project.properties['nexusUsername']
                ext.nexusPassword = project.properties['nexusPassword']

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ext.nexusUsername, password: ext.nexusPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ext.nexusUsername, password: ext.nexusPassword)
                }

                pom.project {
                    name 'minio'
                    packaging 'jar'
                    description 'MinIO Java SDK for Amazon S3 Compatible Cloud Storage'
                    url 'https://github.com/minio/minio-java'
                    inceptionYear '2015'

                    scm {
                        connection 'scm:git:git@github.com:minio/minio-java.git'
                        developerConnection 'scm:git:git@github.com:minio/minio-java.git'
                        url 'http://github.com/minio/minio-java'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'minio'
                            name 'MinIO Inc.'
                            email 'dev@min.io'
                        }
                    }
                }
            }
        }
    }
}

project(':examples') {
    dependencies {
        compile "me.tongfei:progressbar:0.5.3"
        compile project(':api')
    }

    sourceSets {
        main {
	    java {
	        srcDirs = ["$rootDir/examples"]
	    }
	}
    }
}

import org.gradle.internal.os.OperatingSystem;

project(':functional') {
    dependencies {
        compile project(':api')
    }

    sourceSets {
        main {
            java {
                srcDirs = ["$rootDir/functional"]
            }
        }
    }

    task runFunctionalTest(type:JavaExec) {
        main = 'FunctionalTest'
        classpath = sourceSets.main.runtimeClasspath

        ext.endpoint = 'https://play.min.io'
        if (rootProject.hasProperty('endpoint')) {
            ext.endpoint = rootProject.properties['endpoint']
        }

        ext.accessKey = 'Q3AM3UQ867SPQQA43P2F'
        if (project.properties.containsKey('accessKey')) {
            ext.accessKey = rootProject.properties['accessKey']
        }

        ext.secretKey = 'zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG'
        if (project.properties.containsKey('secretKey')) {
            ext.secretKey = rootProject.properties['secretKey']
        }

        ext.region = 'us-east-1'
        if (project.properties.containsKey('region')) {
            ext.region = rootProject.properties['region']
        }

        maxHeapSize = "4096m"
        jvmArgs "-Xms256m"
        if (rootProject.hasProperty('endpoint') || OperatingSystem.current().isWindows()) {
            args = [ext.endpoint, ext.accessKey, ext.secretKey, ext.region]
	}
    }
}
